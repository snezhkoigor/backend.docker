version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      build:
        context: ./workspace
        args:
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      networks:
        - frontend
        - backend

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
          - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
          - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
          - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2375
        - FAKETIME=${PHP_FPM_FAKETIME}
      depends_on:
        - workspace
      networks:
        - backend
      links:
        - docker-in-docker

### PHP Worker ############################################
    php-worker:
      build:
        context: ./php-worker
        args:
          - PHP_VERSION=${PHP_VERSION}
          - INSTALL_PGSQL=${PHP_WORKER_INSTALL_PGSQL}
          - INSTALL_BCMATH=${PHP_WORKER_INSTALL_BCMATH}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./php-worker/supervisord.d:/etc/supervisord.d
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend

### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### PostgreSQL ###########################################
    postgres:
      build: ./postgres
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### PostgreSQL PostGis ###################################
    postgres-postgis:
      build: ./postgres-postgis
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### MongoDB ##############################################
    mongo:
      build: ./mongo
      ports:
        - "${MONGODB_PORT}:27017"
      volumes:
        - ${DATA_PATH_HOST}/mongo:/data/db
      networks:
        - backend

### Logstash ################################################
    logstash:
      build: ./logstash
      depends_on:
        - elasticsearch
      networks:
        - backend

### Metricbeat ################################################
    metricbeat:
      build: ./metricbeat
      volumes:
        - ${DATA_PATH_HOST}/metricbeat:/usr/share/metricbeat/data
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - backend

### Filebeat ################################################
    filebeat:
      build: ./filebeat
      volumes:
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${DATA_PATH_HOST}/filebeat:/usr/share/filebeat/data
      networks:
        - backend

### Heartbeat ################################################
    heartbeat:
      build: ./heartbeat
      volumes:
        - ${DATA_PATH_HOST}/heartbeat:/usr/share/heartbeat/data
      networks:
        - backend

### Packetbeat ################################################
    packetbeat:
      build: ./packetbeat
      volumes:
        - ${DATA_PATH_HOST}/packetbeat:/usr/share/packetbeat/data
      networks:
        - backend

### Redis ################################################
    redis:
      build: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend
        
### RabbitMQ #############################################
    rabbitmq:
      build: ./rabbitmq
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      depends_on:
        - php-fpm
      networks:
        - backend

### ElasticSearch ########################################
    elasticsearch:
      build: ./elasticsearch
      volumes:
        - elasticsearch:/usr/share/elasticsearch/data
        - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      environment:
        - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
        - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
        - node.name=${ELASTICSEARCH_NODE_NAME}
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms${ELASTICSEARCH_ES_JAVA_OPTS} -Xmx${ELASTICSEARCH_ES_JAVA_OPTS}"
      ulimits:
        memlock:
          soft: -1
          hard: -1
      ports:
        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### Kibana ##############################################
    kibana:
      build: ./kibana
      ports:
        - "${KIBANA_HTTP_PORT}:5601"
      environment:
        - server.name=${KIBANA_HTTP}
        - elasticsearch.url=${ELASTICSEARCH_HOST}
        - elasticsearch.username=${ELASTICSEARCH_USER}
        - elasticsearch.password=${ELASTICSEARCH_PASSWORD}
        - xpack.monitoring.ui.container.elasticsearch.enabled=${ELASTICSEARCH_XPACK_ENABLED}
#      depends_on:
#        - elasticsearch
      networks:
        - frontend
        - backend

### Certbot #########################################
    certbot:
      build:
        context: ./certbot
      volumes:
        - ./data/certbot/certs/:/var/certs
        - ./certbot/letsencrypt/:${APP_CODE_PATH_CONTAINER}/letsencrypt
      environment:
        - CN="fake.domain.com"
        - EMAIL="fake.email@gmail.com"
      networks:
        - frontend

### Mailhog ################################################
    mailhog:
      build: ./mailhog
      ports:
        - "1025:1025"
        - "8025:8025"
      networks:
        - frontend
        - backend

### MailDev ##############################################
    maildev:
      build: ./maildev
      ports:
        - "${MAILDEV_HTTP_PORT}:80"
        - "${MAILDEV_SMTP_PORT}:25"
      networks:
        - frontend
        - backend

### Laravel Echo Server #######################################
    laravel-echo-server:
      build:
        context: ./laravel-echo-server
      volumes:
        - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
      ports:
        - "${LARAVEL_ECHO_SERVER_PORT}:6001"
      links:
        - redis
      networks:
        - frontend
        - backend

### Thumbor #########################################
    thumbor:
      build: ./thumbor
      volumes:
        - ${DATA_PATH_HOST}/thumbor/data:/data
        - ${DATA_PATH_HOST}/thumbor/data:/logs
      ports:
        - "${THUMBOR_PORT}:8000"
      environment:
        - THUMBOR_LOG_FORMAT=${THUMBOR_LOG_FORMAT}
        - THUMBOR_LOG_DATE_FORMAT=${THUMBOR_LOG_DATE_FORMAT}
        - MAX_WIDTH=${MAX_WIDTH}
        - MAX_HEIGHT=${MAX_HEIGHT}
        - MIN_WIDTH=${MIN_WIDTH}
        - MIN_HEIGHT=${MIN_HEIGHT}
        - ALLOWED_SOURCES=${ALLOWED_SOURCES}
        - QUALITY=${QUALITY}
        - WEBP_QUALITY=${WEBP_QUALITY}
        - PNG_COMPRESSION_LEVEL=${PNG_COMPRESSION_LEVEL}
        - AUTO_WEBP=${AUTO_WEBP}
        - MAX_AGE=${MAX_AGE}
        - MAX_AGE_TEMP_IMAGE=${MAX_AGE_TEMP_IMAGE}
        - RESPECT_ORIENTATION=${RESPECT_ORIENTATION}
        - IGNORE_SMART_ERRORS=${IGNORE_SMART_ERRORS}
        - PRESERVE_EXIF_INFO=${PRESERVE_EXIF_INFO}
        - ALLOW_ANIMATED_GIFS=${ALLOW_ANIMATED_GIFS}
        - USE_GIFSICLE_ENGINE=${USE_GIFSICLE_ENGINE}
        - USE_BLACKLIST=${USE_BLACKLIST}
        - LOADER=${LOADER}
        - STORAGE=${STORAGE}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - RESULT_STORAGE=${RESULT_STORAGE}
        - ENGINE=${ENGINE}
        - SECURITY_KEY=${SECURITY_KEY}
        - ALLOW_UNSAFE_URL=${ALLOW_UNSAFE_URL}
        - ALLOW_OLD_URLS=${ALLOW_OLD_URLS}
        - FILE_LOADER_ROOT_PATH=${FILE_LOADER_ROOT_PATH}
        - HTTP_LOADER_CONNECT_TIMEOUT=${HTTP_LOADER_CONNECT_TIMEOUT}
        - HTTP_LOADER_REQUEST_TIMEOUT=${HTTP_LOADER_REQUEST_TIMEOUT}
        - HTTP_LOADER_FOLLOW_REDIRECTS=${HTTP_LOADER_FOLLOW_REDIRECTS}
        - HTTP_LOADER_MAX_REDIRECTS=${HTTP_LOADER_MAX_REDIRECTS}
        - HTTP_LOADER_FORWARD_USER_AGENT=${HTTP_LOADER_FORWARD_USER_AGENT}
        - HTTP_LOADER_DEFAULT_USER_AGENT=${HTTP_LOADER_DEFAULT_USER_AGENT}
        - HTTP_LOADER_PROXY_HOST=${HTTP_LOADER_PROXY_HOST}
        - HTTP_LOADER_PROXY_PORT=${HTTP_LOADER_PROXY_PORT}
        - HTTP_LOADER_PROXY_USERNAME=${HTTP_LOADER_PROXY_USERNAME}
        - HTTP_LOADER_PROXY_PASSWORD=${HTTP_LOADER_PROXY_PASSWORD}
        - HTTP_LOADER_CA_CERTS=${HTTP_LOADER_CA_CERTS}
        - HTTP_LOADER_VALIDATE_CERTS=${HTTP_LOADER_VALIDATE_CERTS}
        - HTTP_LOADER_CLIENT_KEY=${HTTP_LOADER_CLIENT_KEY}
        - HTTP_LOADER_CLIENT_CERT=${HTTP_LOADER_CLIENT_CERT}
        - HTTP_LOADER_CURL_ASYNC_HTTP_CLIENT=${HTTP_LOADER_CURL_ASYNC_HTTP_CLIENT}
        - STORAGE_EXPIRATION_SECONDS=${STORAGE_EXPIRATION_SECONDS}
        - STORES_CRYPTO_KEY_FOR_EACH_IMAGE=${STORES_CRYPTO_KEY_FOR_EACH_IMAGE}
        - FILE_STORAGE_ROOT_PATH=${FILE_STORAGE_ROOT_PATH}
        - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE}
        - UPLOAD_ENABLED=${UPLOAD_ENABLED}
        - UPLOAD_PHOTO_STORAGE=${UPLOAD_PHOTO_STORAGE}
        - UPLOAD_DELETE_ALLOWED=${UPLOAD_DELETE_ALLOWED}
        - UPLOAD_PUT_ALLOWED=${UPLOAD_PUT_ALLOWED}
        - UPLOAD_DEFAULT_FILENAME=${UPLOAD_DEFAULT_FILENAME}
        - MONGO_STORAGE_SERVER_HOST=${MONGO_STORAGE_SERVER_HOST}
        - MONGO_STORAGE_SERVER_PORT=${MONGO_STORAGE_SERVER_PORT}
        - MONGO_STORAGE_SERVER_DB=${MONGO_STORAGE_SERVER_DB}
        - MONGO_STORAGE_SERVER_COLLECTION=${MONGO_STORAGE_SERVER_COLLECTION}
        - REDIS_STORAGE_SERVER_HOST=${REDIS_STORAGE_SERVER_HOST}
        - REDIS_STORAGE_SERVER_PORT=${REDIS_STORAGE_SERVER_PORT}
        - REDIS_STORAGE_SERVER_DB=${REDIS_STORAGE_SERVER_DB}
        - REDIS_STORAGE_SERVER_PASSWORD=${REDIS_STORAGE_SERVER_PASSWORD}
        - REDIS_RESULT_STORAGE_SERVER_HOST=${REDIS_RESULT_STORAGE_SERVER_HOST}
        - REDIS_RESULT_STORAGE_SERVER_PORT=${REDIS_RESULT_STORAGE_SERVER_PORT}
        - REDIS_RESULT_STORAGE_SERVER_DB=${REDIS_RESULT_STORAGE_SERVER_DB}
        - REDIS_RESULT_STORAGE_SERVER_PASSWORD=${REDIS_RESULT_STORAGE_SERVER_PASSWORD}
        - MEMCACHE_STORAGE_SERVERS=${MEMCACHE_STORAGE_SERVERS}
        - MIXED_STORAGE_FILE_STORAGE=${MIXED_STORAGE_FILE_STORAGE}
        - MIXED_STORAGE_CRYPTO_STORAGE=${MIXED_STORAGE_CRYPTO_STORAGE}
        - MIXED_STORAGE_DETECTOR_STORAGE=${MIXED_STORAGE_DETECTOR_STORAGE}
        - META_CALLBACK_NAME=${META_CALLBACK_NAME}
        - DETECTORS=${DETECTORS}
        - FACE_DETECTOR_CASCADE_FILE=${FACE_DETECTOR_CASCADE_FILE}
        - OPTIMIZERS=${OPTIMIZERS}
        - JPEGTRAN_PATH=${JPEGTRAN_PATH}
        - PROGRESSIVE_JPEG=${PROGRESSIVE_JPEG}
        - RESULT_STORAGE_EXPIRATION_SECONDS=${RESULT_STORAGE_EXPIRATION_SECONDS}
        - RESULT_STORAGE_FILE_STORAGE_ROOT_PATH=${RESULT_STORAGE_FILE_STORAGE_ROOT_PATH}
        - RESULT_STORAGE_STORES_UNSAFE=${RESULT_STORAGE_STORES_UNSAFE}
        - REDIS_QUEUE_SERVER_HOST=${REDIS_QUEUE_SERVER_HOST}
        - REDIS_QUEUE_SERVER_PORT=${REDIS_QUEUE_SERVER_PORT}
        - REDIS_QUEUE_SERVER_DB=${REDIS_QUEUE_SERVER_DB}
        - REDIS_QUEUE_SERVER_PASSWORD=${REDIS_QUEUE_SERVER_PASSWORD}
        - SQS_QUEUE_KEY_ID=${SQS_QUEUE_KEY_ID}
        - SQS_QUEUE_KEY_SECRET=${SQS_QUEUE_KEY_SECRET}
        - SQS_QUEUE_REGION=${SQS_QUEUE_REGION}
        - USE_CUSTOM_ERROR_HANDLING=${USE_CUSTOM_ERROR_HANDLING}
        - ERROR_HANDLER_MODULE=${ERROR_HANDLER_MODULE}
        - ERROR_FILE_LOGGER=${ERROR_FILE_LOGGER}
        - ERROR_FILE_NAME_USE_CONTEXT=${ERROR_FILE_NAME_USE_CONTEXT}
        - SENTRY_DSN_URL=${SENTRY_DSN_URL}
        - TC_AWS_REGION=${TC_AWS_REGION}
        - TC_AWS_ENDPOINT=${TC_AWS_ENDPOINT}
        - TC_AWS_STORAGE_BUCKET=${TC_AWS_STORAGE_BUCKET}
        - TC_AWS_STORAGE_ROOT_PATH=${TC_AWS_STORAGE_ROOT_PATH}
        - TC_AWS_LOADER_BUCKET=${TC_AWS_LOADER_BUCKET}
        - TC_AWS_LOADER_ROOT_PATH=${TC_AWS_LOADER_ROOT_PATH}
        - TC_AWS_RESULT_STORAGE_BUCKET=${TC_AWS_RESULT_STORAGE_BUCKET}
        - TC_AWS_RESULT_STORAGE_ROOT_PATH=${TC_AWS_RESULT_STORAGE_ROOT_PATH}
        - TC_AWS_STORAGE_SSE=${TC_AWS_STORAGE_SSE}
        - TC_AWS_STORAGE_RRS=${TC_AWS_STORAGE_RRS}
        - TC_AWS_ENABLE_HTTP_LOADER=${TC_AWS_ENABLE_HTTP_LOADER}
        - TC_AWS_ALLOWED_BUCKETS=${TC_AWS_ALLOWED_BUCKETS}
        - TC_AWS_STORE_METADATA=${TC_AWS_STORE_METADATA}
      networks:
        - frontend
        - backend

### Docker-in-Docker ################################################
    docker-in-docker:
      image: docker:dind
      privileged: true
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      expose:
        - 2375
      networks:
        - backend

### MongoWebUI ################################################
    mongo-webui:
      build:
        context: ./mongo-webui
      restart: always
      environment:
        - ROOT_URL=${MONGO_WEBUI_ROOT_URL}
        - MONGO_URL=${MONGO_WEBUI_MONGO_URL}
        - INSTALL_MONGO=${MONGO_WEBUI_INSTALL_MONGO}
      volumes:
        - ${DATA_PATH_HOST}/mongo-webui:/data/db
      ports:
        - "${MONGO_WEBUI_PORT}:3000"
      networks:
        - backend
      depends_on:
        - mongo

### DOCKER-REGISTRY ################################################
    docker-registry:
      build:
        context: ./docker-registry
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - ${DATA_PATH_HOST}/docker-registry:/var/lib/registry
      ports:
        - "${DOCKER_REGISTRY_PORT}:5000"
      networks:
        - backend

### DOCKER-WEB-UI ################################################
    docker-web-ui:
      build:
        context: ./docker-web-ui
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
        - ENV_DOCKER_REGISTRY_HOST=${DOCKER_WEBUI_REGISTRY_HOST}
        - ENV_DOCKER_REGISTRY_PORT=${DOCKER_WEBUI_REGISTRY_PORT}
        - ENV_DOCKER_REGISTRY_USE_SSL=${DOCKER_REGISTRY_USE_SSL}
        - ENV_MODE_BROWSE_ONLY=${DOCKER_REGISTRY_BROWSE_ONLY}
      volumes:
        - /etc/localtime:/etc/localtime:ro
      ports:
        - "${DOCKER_WEBUI_PORT}:80"
      networks:
        - frontend
        - backend